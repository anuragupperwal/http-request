{
  "blogs": [
    {
      "title": "Hands-free Coding",
      "author": "notMe",
      "id": 1,
      "body": "Earlier this year, I developed Cubital Tunnel Syndrome, a repetitive-strain injury, in both of my elbows. As a result, I pretty much can't use a mouse or keyboard; after a few minutes, I get a burning pain shooting down my arms. Even if I try to limit my computer usage to 60-second bursts, I wind up inadvertently making the situation worse. As you might imagine, this was a pretty big deal; as a software developer, my entire career is based on being able to use a keyboard! After many failed attempts at solving the problem with physiotherapy, ergonomics, braces, diet and supplements, prescription medications, supplements, mindbody soul-searching, and a bunch of other stuff, I've found a solution that allows me to be productive without risking further nerve damage. I now work almost exclusively using a microphone and an eye-tracker. In this article, I'll show you what that workflow looks like, and how I've optimized it to fit my needs! Update, December 9th: I am thrilled to report that my injury has gotten much better! I'm back to using a keyboard and mouse as my primary input mechanism. It's a relief, but I also feel confident that I would have managed just fine either way. \nIt's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell—getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. \nLearning how to learn effectively is super important, especially as a software developer; learning new things is practically the whole gig! If you can learn to quickly pick up new languages/frameworks/tools, you'll be able to be way more productive than the average developer. It's sort of a superpower. \n In this blog post, I'll share what I've learned about learning, and show you how I pick up new skills lickety-split! \n Link to this headingMixing guided and unguided learning \n Broadly speaking, there are two categories of learning: \n Guided: Reading a tutorial, taking a course, watching a YouTube video. Anything where you're following a guide.\nUnguided: Creating your own projects from scratch, extending a tutorial, looking things up in the docs. Anything where you aren't following a guide.\nIf you only follow guided resources, you'll wind up in tutorial hell. You won't develop the problem-solving skills needed to succeed as a developer. When you try to build your own project, you won't know where to start. It will feel like you've spent so much time practicing without developing any tangible, practical skills. It's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell—getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. \nLearning how to learn effectively is super important, especially as a software developer; learning new things is practically the whole gig! If you can learn to quickly pick up new languages/frameworks/tools, you'll be able to be way more productive than the average developer. It's sort of a superpower. \n In this blog post, I'll share what I've learned about learning, and show you how I pick up new skills lickety-split! \n Link to this headingMixing guided and unguided learning \n Broadly speaking, there are two categories of learning: \n Guided: Reading a tutorial, taking a course, watching a YouTube video. Anything where you're following a guide.\nUnguided: Creating your own projects from scratch, extending a tutorial, looking things up in the docs. Anything where you aren't following a guide.\nIf you only follow guided resources, you'll wind up in tutorial hell. You won't develop the problem-solving skills needed to succeed as a developer. When you try to build your own project, you won't know where to start. It will feel like you've spent so much time practicing without developing any tangible, practical skills."
    },
    {
      "title": "How I Built My Blog",
      "author": "againNotMe",
      "id": 2,
      "body": "When I was building this blog, my biggest priority was to find a solution that would let me embed totally custom content in each post, like this exploding-logo animation thing. When using markdown or a rich-text editor in a CMS, it's not at all clear how to do this: you're generally limited to the handful of HTML elements that these tools can render to. \nIn this article, I'm going to break down how my blog works, so that you can build something similar for yourself. I'll also cover all the most-commonly-asked questions I've gotten over the years. It's not a tutorial, but it should give you a broad roadmap to follow. Link to this headingThe stack This blog is a Next.js application. \nWith Next, you have a few different options when it comes to page rendering: you can choose to do it “on-demand” (server-side rendering) or ahead of time (static site generation). I've opted to build all the blog posts ahead of time, when the site is generated. I also use Next's API Routes for things that require persistence in the backend. I use MongoDB as my database, to store stuff like the # of likes each post has. I deploy this blog on Vercel. I initially chose them because they're the company behind Next.js, and I figured it would be well-optimized. Honestly, their platform is awesome. I wound up moving some of my non-Next projects there as well. \nIt's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell—getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. \nLearning how to learn effectively is super important, especially as a software developer; learning new things is practically the whole gig! If you can learn to quickly pick up new languages/frameworks/tools, you'll be able to be way more productive than the average developer. It's sort of a superpower. \n In this blog post, I'll share what I've learned about learning, and show you how I pick up new skills lickety-split! \n Link to this headingMixing guided and unguided learning \n Broadly speaking, there are two categories of learning: \n Guided: Reading a tutorial, taking a course, watching a YouTube video. Anything where you're following a guide.\nUnguided: Creating your own projects from scratch, extending a tutorial, looking things up in the docs. Anything where you aren't following a guide.\nIf you only follow guided resources, you'll wind up in tutorial hell. You won't develop the problem-solving skills needed to succeed as a developer. When you try to build your own project, you won't know where to start. It will feel like you've spent so much time practicing without developing any tangible, practical skills. It's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell—getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. \nLearning how to learn effectively is super important, especially as a software developer; learning new things is practically the whole gig! If you can learn to quickly pick up new languages/frameworks/tools, you'll be able to be way more productive than the average developer. It's sort of a superpower. \n In this blog post, I'll share what I've learned about learning, and show you how I pick up new skills lickety-split! \n Link to this headingMixing guided and unguided learning \n Broadly speaking, there are two categories of learning: \n Guided: Reading a tutorial, taking a course, watching a YouTube video. Anything where you're following a guide.\nUnguided: Creating your own projects from scratch, extending a tutorial, looking things up in the docs. Anything where you aren't following a guide.\nIf you only follow guided resources, you'll wind up in tutorial hell. You won't develop the problem-solving skills needed to succeed as a developer. When you try to build your own project, you won't know where to start. It will feel like you've spent so much time practicing without developing any tangible, practical skills."
    },
    {
      "title": "CSS Variables for React Devs",
      "author": "stillNotMe",
      "id": 3,
      "body": "This is a controversial opinion, but I rather like CSS-in-JS. But! I also really like CSS. And I don't believe that using CSS-in-JS absolves you from needing to learn it. You're writing CSS either way! It's just packaged a little bit differently. \nNo matter where you put your CSS, it behooves you to develop a mastery of the language. Becoming better at CSS will make you a more effective front-end developer. In this tutorial, we're going to see how to take advantage of one of the most exciting newer developments in CSS: CSS variables, AKA Custom Properties. We'll see how we can use them in our React apps to improve our workflows and do some pretty fancy stuff. Link to this headingWhy though? As a React developer, you might be thinking that you don't need variables in CSS. You have an entire JavaScript engine at your disposal! There are two reasons to switch to CSS variables in your React app: \nThe ergonomics are nice. It unlocks new possibilities! You can do things with CSS variables that are not possible with JS. \nIt's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell—getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. \nLearning how to learn effectively is super important, especially as a software developer; learning new things is practically the whole gig! If you can learn to quickly pick up new languages/frameworks/tools, you'll be able to be way more productive than the average developer. It's sort of a superpower. \n In this blog post, I'll share what I've learned about learning, and show you how I pick up new skills lickety-split! \n Link to this headingMixing guided and unguided learning \n Broadly speaking, there are two categories of learning: \n Guided: Reading a tutorial, taking a course, watching a YouTube video. Anything where you're following a guide.\nUnguided: Creating your own projects from scratch, extending a tutorial, looking things up in the docs. Anything where you aren't following a guide.\nIf you only follow guided resources, you'll wind up in tutorial hell. You won't develop the problem-solving skills needed to succeed as a developer. When you try to build your own project, you won't know where to start. It will feel like you've spent so much time practicing without developing any tangible, practical skills. It's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell—getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. \nLearning how to learn effectively is super important, especially as a software developer; learning new things is practically the whole gig! If you can learn to quickly pick up new languages/frameworks/tools, you'll be able to be way more productive than the average developer. It's sort of a superpower. \n In this blog post, I'll share what I've learned about learning, and show you how I pick up new skills lickety-split! \n Link to this headingMixing guided and unguided learning \n Broadly speaking, there are two categories of learning: \n Guided: Reading a tutorial, taking a course, watching a YouTube video. Anything where you're following a guide.\nUnguided: Creating your own projects from scratch, extending a tutorial, looking things up in the docs. Anything where you aren't following a guide.\nIf you only follow guided resources, you'll wind up in tutorial hell. You won't develop the problem-solving skills needed to succeed as a developer. When you try to build your own project, you won't know where to start. It will feel like you've spent so much time practicing without developing any tangible, practical skills."
    },
    {
      "title": "How To Learn Stuff Quickly",
      "author": "notMe",
      "id": 4,
      "body": "It's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell—getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. \nLearning how to learn effectively is super important, especially as a software developer; learning new things is practically the whole gig! If you can learn to quickly pick up new languages/frameworks/tools, you'll be able to be way more productive than the average developer. It's sort of a superpower. \n In this blog post, I'll share what I've learned about learning, and show you how I pick up new skills lickety-split! \n Link to this headingMixing guided and unguided learning \n Broadly speaking, there are two categories of learning: \n Guided: Reading a tutorial, taking a course, watching a YouTube video. Anything where you're following a guide.\nUnguided: Creating your own projects from scratch, extending a tutorial, looking things up in the docs. Anything where you aren't following a guide.\nIf you only follow guided resources, you'll wind up in tutorial hell. You won't develop the problem-solving skills needed to succeed as a developer. When you try to build your own project, you won't know where to start. It will feel like you've spent so much time practicing without developing any tangible, practical skills. \nIt's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell—getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. \nLearning how to learn effectively is super important, especially as a software developer; learning new things is practically the whole gig! If you can learn to quickly pick up new languages/frameworks/tools, you'll be able to be way more productive than the average developer. It's sort of a superpower. \n In this blog post, I'll share what I've learned about learning, and show you how I pick up new skills lickety-split! \n Link to this headingMixing guided and unguided learning \n Broadly speaking, there are two categories of learning: \n Guided: Reading a tutorial, taking a course, watching a YouTube video. Anything where you're following a guide.\nUnguided: Creating your own projects from scratch, extending a tutorial, looking things up in the docs. Anything where you aren't following a guide.\nIf you only follow guided resources, you'll wind up in tutorial hell. You won't develop the problem-solving skills needed to succeed as a developer. When you try to build your own project, you won't know where to start. It will feel like you've spent so much time practicing without developing any tangible, practical skills. It's often said that the internet has democratized education: the sum of human knowledge is only a Google search away! And yet, having access to information is only half of the story; you also need to be able to convert raw information into usable skills. For a lot of us, the gap between the two can lead to things like tutorial hell—getting stuck doing tutorial after tutorial without ever feeling like you're making substantive progress. \nLearning how to learn effectively is super important, especially as a software developer; learning new things is practically the whole gig! If you can learn to quickly pick up new languages/frameworks/tools, you'll be able to be way more productive than the average developer. It's sort of a superpower. \n In this blog post, I'll share what I've learned about learning, and show you how I pick up new skills lickety-split! \n Link to this headingMixing guided and unguided learning \n Broadly speaking, there are two categories of learning: \n Guided: Reading a tutorial, taking a course, watching a YouTube video. Anything where you're following a guide.\nUnguided: Creating your own projects from scratch, extending a tutorial, looking things up in the docs. Anything where you aren't following a guide.\nIf you only follow guided resources, you'll wind up in tutorial hell. You won't develop the problem-solving skills needed to succeed as a developer. When you try to build your own project, you won't know where to start. It will feel like you've spent so much time practicing without developing any tangible, practical skills."
    },
    {
      "title": "Another day, another blog",
      "author": "Me",
      "body": "This is another blog. Nice to see'ya!",
      "id": 6
    }
  ]
}